// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using N_Layer_App_EF_Template.DataAccess.Contexts;

#nullable disable

namespace N_Layer_App_EF_Template.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClaimRole", b =>
                {
                    b.Property<long>("ClaimsId")
                        .HasColumnType("bigint");

                    b.Property<long>("RolesId")
                        .HasColumnType("bigint");

                    b.HasKey("ClaimsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("ClaimRole");

                    b.HasData(
                        new
                        {
                            ClaimsId = 1L,
                            RolesId = 1L
                        },
                        new
                        {
                            ClaimsId = 2L,
                            RolesId = 2L
                        },
                        new
                        {
                            ClaimsId = 3L,
                            RolesId = 3L
                        });
                });

            modelBuilder.Entity("N_Layer_App_EF_Template.Domain.Entities.Concretes.Claim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Claims");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2024, 12, 27, 11, 8, 27, 955, DateTimeKind.Utc).AddTicks(8287),
                            Description = "Permission to manage users",
                            Name = "ManageUsers"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2024, 12, 27, 11, 8, 27, 955, DateTimeKind.Utc).AddTicks(8293),
                            Description = "Permission to view reports",
                            Name = "ViewReports"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2024, 12, 27, 11, 8, 27, 955, DateTimeKind.Utc).AddTicks(8295),
                            Description = "Permission to edit content",
                            Name = "EditContent"
                        });
                });

            modelBuilder.Entity("N_Layer_App_EF_Template.Domain.Entities.Concretes.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2024, 12, 27, 11, 8, 27, 955, DateTimeKind.Utc).AddTicks(8418),
                            Description = "Administrator role",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2024, 12, 27, 11, 8, 27, 955, DateTimeKind.Utc).AddTicks(8422),
                            Description = "Moderator role",
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2024, 12, 27, 11, 8, 27, 955, DateTimeKind.Utc).AddTicks(8423),
                            Description = "Standard user role",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("N_Layer_App_EF_Template.Domain.Entities.Concretes.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("AccessFailedCount")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailComfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPermanently")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockOutEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Otp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OtpExpiration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OtpSendDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OtpVerificationMethod")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = (byte)0,
                            BirthDate = new DateTime(1990, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 12, 27, 11, 8, 27, 955, DateTimeKind.Utc).AddTicks(8480),
                            Email = "john.doe@example.com",
                            EmailComfirmed = true,
                            FirstName = "John",
                            IsDeleted = false,
                            IsPermanently = false,
                            LastName = "Doe",
                            LockOutEnabled = false,
                            MiddleName = "Michael",
                            Otp = "1234",
                            OtpExpiration = new DateTime(2024, 12, 27, 11, 13, 27, 955, DateTimeKind.Utc).AddTicks(8471),
                            OtpSendDate = new DateTime(2024, 12, 27, 11, 8, 27, 955, DateTimeKind.Utc).AddTicks(8477),
                            OtpVerificationMethod = 1,
                            PasswordHash = "hashed_password_1",
                            PhoneNumber = "+123456789",
                            PhoneNumberConfirmed = true
                        },
                        new
                        {
                            Id = 2L,
                            AccessFailedCount = (byte)1,
                            BirthDate = new DateTime(1985, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 12, 27, 11, 8, 27, 955, DateTimeKind.Utc).AddTicks(8489),
                            Email = "jane.smith@example.com",
                            EmailComfirmed = true,
                            FirstName = "Jane",
                            IsDeleted = false,
                            IsPermanently = false,
                            LastName = "Smith",
                            LockOutEnabled = true,
                            MiddleName = "Elizabeth",
                            Otp = "5678",
                            OtpExpiration = new DateTime(2024, 12, 27, 11, 18, 27, 955, DateTimeKind.Utc).AddTicks(8486),
                            OtpSendDate = new DateTime(2024, 12, 27, 11, 8, 27, 955, DateTimeKind.Utc).AddTicks(8487),
                            OtpVerificationMethod = 0,
                            PasswordHash = "hashed_password_2",
                            PhoneNumber = "+987654321",
                            PhoneNumberConfirmed = true
                        },
                        new
                        {
                            Id = 3L,
                            AccessFailedCount = (byte)2,
                            BirthDate = new DateTime(1995, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 12, 27, 11, 8, 27, 955, DateTimeKind.Utc).AddTicks(8494),
                            Email = "alice.brown@example.com",
                            EmailComfirmed = false,
                            FirstName = "Alice",
                            IsDeleted = false,
                            IsPermanently = false,
                            LastName = "Brown",
                            LockOutEnabled = false,
                            MiddleName = "Marie",
                            Otp = "91011",
                            OtpExpiration = new DateTime(2024, 12, 27, 11, 23, 27, 955, DateTimeKind.Utc).AddTicks(8492),
                            OtpSendDate = new DateTime(2024, 12, 27, 11, 8, 27, 955, DateTimeKind.Utc).AddTicks(8492),
                            OtpVerificationMethod = 1,
                            PasswordHash = "hashed_password_3",
                            PhoneNumber = "+555123456",
                            PhoneNumberConfirmed = false
                        });
                });

            modelBuilder.Entity("N_Layer_App_EF_Template.Domain.Entities.Concretes.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPermanently")
                        .HasColumnType("bit");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2024, 12, 27, 11, 8, 27, 955, DateTimeKind.Utc).AddTicks(8538),
                            IsDeleted = false,
                            IsPermanently = false,
                            ProviderKey = "google-key-1",
                            ProviderName = "Google",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2024, 12, 27, 11, 8, 27, 955, DateTimeKind.Utc).AddTicks(8543),
                            IsDeleted = false,
                            IsPermanently = false,
                            ProviderKey = "facebook-key-2",
                            ProviderName = "Facebook",
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2024, 12, 27, 11, 8, 27, 955, DateTimeKind.Utc).AddTicks(8545),
                            IsDeleted = false,
                            IsPermanently = false,
                            ProviderKey = "twitter-key-3",
                            ProviderName = "Twitter",
                            UserId = 3L
                        });
                });

            modelBuilder.Entity("N_Layer_App_EF_Template.Domain.Entities.Concretes.UserToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");

                    b.HasData(
                        new
                        {
                            Id = "token-1",
                            CreatedDate = new DateTime(2024, 12, 27, 11, 8, 27, 955, DateTimeKind.Utc).AddTicks(8587),
                            ExpireDate = new DateTime(2025, 1, 3, 11, 8, 27, 955, DateTimeKind.Utc).AddTicks(8585),
                            Key = "refresh",
                            UserId = 1L,
                            Value = "token-value-1"
                        },
                        new
                        {
                            Id = "token-2",
                            CreatedDate = new DateTime(2024, 12, 27, 11, 8, 27, 955, DateTimeKind.Utc).AddTicks(8593),
                            ExpireDate = new DateTime(2025, 1, 3, 11, 8, 27, 955, DateTimeKind.Utc).AddTicks(8592),
                            Key = "refresh",
                            UserId = 2L,
                            Value = "token-value-2"
                        },
                        new
                        {
                            Id = "token-3",
                            CreatedDate = new DateTime(2024, 12, 27, 11, 8, 27, 955, DateTimeKind.Utc).AddTicks(8595),
                            ExpireDate = new DateTime(2025, 1, 3, 11, 8, 27, 955, DateTimeKind.Utc).AddTicks(8594),
                            Key = "refresh",
                            UserId = 3L,
                            Value = "token-value-3"
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<long>("RolesId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            RolesId = 1L,
                            UsersId = 1L
                        },
                        new
                        {
                            RolesId = 2L,
                            UsersId = 2L
                        },
                        new
                        {
                            RolesId = 3L,
                            UsersId = 3L
                        });
                });

            modelBuilder.Entity("ClaimRole", b =>
                {
                    b.HasOne("N_Layer_App_EF_Template.Domain.Entities.Concretes.Claim", null)
                        .WithMany()
                        .HasForeignKey("ClaimsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("N_Layer_App_EF_Template.Domain.Entities.Concretes.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("N_Layer_App_EF_Template.Domain.Entities.Concretes.UserLogin", b =>
                {
                    b.HasOne("N_Layer_App_EF_Template.Domain.Entities.Concretes.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("N_Layer_App_EF_Template.Domain.Entities.Concretes.UserToken", b =>
                {
                    b.HasOne("N_Layer_App_EF_Template.Domain.Entities.Concretes.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("N_Layer_App_EF_Template.Domain.Entities.Concretes.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("N_Layer_App_EF_Template.Domain.Entities.Concretes.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("N_Layer_App_EF_Template.Domain.Entities.Concretes.User", b =>
                {
                    b.Navigation("UserLogins");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
